blueprint:
  name: Hue Random White Strobe (True Random Parallel)
  description: >
    Each selected Hue light strobes pure white with independent random timing,
    so they do not flash in sync.
  domain: script
  input:
    target_lights:
      name: Target Hue Lights
      description: Select the Hue lights to strobe
      selector:
        entity:
          domain: light
          multiple: true
    flashes:
      name: Number of Flashes
      description: How many times each light should flash
      default: 20
      selector:
        number:
          min: 1
          max: 500
          step: 1
          mode: slider
    min_delay:
      name: Minimum Delay (ms)
      description: Minimum random delay between on/off (in milliseconds)
      default: 100
      selector:
        number:
          min: 10
          max: 2000
          step: 10
          unit_of_measurement: ms
    max_delay:
      name: Maximum Delay (ms)
      description: Maximum random delay between on/off (in milliseconds)
      default: 300
      selector:
        number:
          min: 20
          max: 5000
          step: 10
          unit_of_measurement: ms

variables:
  min_d: !input min_delay
  max_d: !input max_delay

sequence:
  - parallel:
      # Create an independent loop for each light
      - variables:
          light_id: "{{ light }}"
        repeat:
          count: !input flashes
          sequence:
            - service: light.turn_on
              target:
                entity_id: "{{ light_id }}"
              data:
                brightness: 255
                color_temp: 153
            - delay: >
                {{ ((min_d | int) + range(0, (max_d | int - min_d | int) + 1) | random) / 1000 }}
            - service: light.turn_off
              target:
                entity_id: "{{ light_id }}"
            - delay: >
                {{ ((min_d | int) + range(0, (max_d | int - min_d | int) + 1) | random) / 1000 }}
      {% for light in !input target_lights %}
      - variables:
          light_id: "{{ light }}"
        repeat:
          count: !input flashes
          sequence:
            - service: light.turn_on
              target:
                entity_id: "{{ light_id }}"
              data:
                brightness: 255
                color_temp: 153
            - delay: >
                {{ ((min_d | int) + range(0, (max_d | int - min_d | int) + 1) | random) / 1000 }}
            - service: light.turn_off
              target:
                entity_id: "{{ light_id }}"
            - delay: >
                {{ ((min_d | int) + range(0, (max_d | int - min_d | int) + 1) | random) / 1000 }}
      {% endfor %}
mode: restart
